name: Foodgram workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 
        pip install -r backend/requirements.txt 
    - name: Test with flake8
      run: |
        python -m flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to Dockerhub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: repo check out
        uses: actions/checkout@v2
      - name: Set up docker Build
        uses: docker/setup-buildx-action@v1
      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: push to dockerhub
        uses: docker/build-push-action@v2
        with: 
          push: true
          context: ./backend
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: success() && github.ref == 'refs/heads/main' || success() && github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          stack_file_name: docker-compose.yaml
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram
            sudo docker compose stop
            sudo docker compose rm web
            touch .env 
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose up --build -d